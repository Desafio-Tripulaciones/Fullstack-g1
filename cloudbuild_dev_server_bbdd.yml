steps:
# Configurar el proyecto
- name: 'gcr.io/cloud-builders/gcloud'
  args: ['config', 'set', 'project', 'desafio-tripulaciones-grupo1']

# Obtener valores de Secret Manager para PostgreSQL
- name: 'gcr.io/cloud-builders/gcloud'
  args:
    - 'secrets'
    - 'versions'
    - 'access'
    - 'latest'
    - '--secret=PG_USER'
    - '--region=global'
  id: 'get_pg_user'
- name: 'gcr.io/cloud-builders/gcloud'
  args:
    - 'secrets'
    - 'versions'
    - 'access'
    - 'latest'
    - '--secret=PG_HOST'
    - '--region=global'
  id: 'get_pg_host'
- name: 'gcr.io/cloud-builders/gcloud'
  args:
    - 'secrets'
    - 'versions'
    - 'access'
    - 'latest'
    - '--secret=PG_DATABASE'
    - '--region=global'
  id: 'get_pg_database'
- name: 'gcr.io/cloud-builders/gcloud'
  args:
    - 'secrets'
    - 'versions'
    - 'access'
    - 'latest'
    - '--secret=PG_PASSWORD'
    - '--region=global'
  id: 'get_pg_password'

# Obtener valores de Secret Manager para tokens JWT
- name: 'gcr.io/cloud-builders/gcloud'
  args:
    - 'secrets'
    - 'versions'
    - 'access'
    - 'latest'
    - '--secret=ACCESS_TOKEN_SECRET'
    - '--region=global'
  id: 'get_access_token_secret'
- name: 'gcr.io/cloud-builders/gcloud'
  args:
    - 'secrets'
    - 'versions'
    - 'access'
    - 'latest'
    - '--secret=REFRESH_TOKEN_SECRET'
    - '--region=global'
  id: 'get_refresh_token_secret'

# Construir la imagen del contenedor
- name: 'gcr.io/cloud-builders/docker'
  args: ['build', '-t', 'gcr.io/$PROJECT_ID/server-app-prod:$COMMIT_SHA', '-f', 'Dockerfile', '.']

# Subir la imagen del contenedor al Registro de Contenedores
- name: 'gcr.io/cloud-builders/docker'
  args: ['push', 'gcr.io/$PROJECT_ID/server-app-prod:$COMMIT_SHA']

# Desplegar la imagen del contenedor en Cloud Run
- name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
  entrypoint: bash
  args: [
    "-c",
    "gcloud run deploy server-app-prod
    --image=gcr.io/$PROJECT_ID/server-app-prod:$COMMIT_SHA 
    --region=europe-west1 
    --platform=managed 
    --allow-unauthenticated 
    --port=5173
    --update-env-vars=PG_USER=$PG_USER,PG_HOST=$PG_HOST,PG_DATABASE=$PG_DATABASE,PG_PASSWORD=$PG_PASSWORD,ACCESS_TOKEN_SECRET=$ACCESS_TOKEN_SECRET,REFRESH_TOKEN_SECRET=$REFRESH_TOKEN_SECRET"
  ]
  env:
  - 'PG_USER=$(cat $PG_USER_FILE)'
  - 'PG_HOST=$(cat $PG_HOST_FILE)'
  - 'PG_DATABASE=$(cat $PG_DATABASE_FILE)'
  - 'PG_PASSWORD=$(cat $PG_PASSWORD_FILE)'
  - 'ACCESS_TOKEN_SECRET=$(cat $ACCESS_TOKEN_SECRET_FILE)'
  - 'REFRESH_TOKEN_SECRET=$(cat $REFRESH_TOKEN_SECRET_FILE)'

images:
- 'gcr.io/$PROJECT_ID/server-app-prod:$COMMIT_SHA'
secrets:
- versionName: projects/desafio-tripulaciones-grupo1/secrets/PG_USER/versions/latest
  secretEnv:
    PG_USER: PG_USER_FILE
- versionName: projects/desafio-tripulaciones-grupo1/secrets/PG_HOST/versions/latest
  secretEnv:
    PG_HOST: PG_HOST_FILE
- versionName: projects/desafio-tripulaciones-grupo1/secrets/PG_DATABASE/versions/latest
  secretEnv:
    PG_DATABASE: PG_DATABASE_FILE
- versionName: projects/desafio-tripulaciones-grupo1/secrets/PG_PASSWORD/versions/latest
  secretEnv:
    PG_PASSWORD: PG_PASSWORD_FILE
- versionName: projects/desafio-tripulaciones-grupo1/secrets/ACCESS_TOKEN_SECRET/versions/latest
  secretEnv:
    ACCESS_TOKEN_SECRET: ACCESS_TOKEN_SECRET_FILE
- versionName: projects/desafio-tripulaciones-grupo1/secrets/REFRESH_TOKEN_SECRET/versions/latest
  secretEnv:
    REFRESH_TOKEN_SECRET: REFRESH_TOKEN_SECRET_FILE
